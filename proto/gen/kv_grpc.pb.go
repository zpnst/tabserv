// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: kv.proto

package tabserv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IPTables_AddDropTcp_FullMethodName    = "/tabserv.IPTables/AddDropTcp"
	IPTables_DeleteDropTcp_FullMethodName = "/tabserv.IPTables/DeleteDropTcp"
	IPTables_ListInput_FullMethodName     = "/tabserv.IPTables/ListInput"
	IPTables_GetHistory_FullMethodName    = "/tabserv.IPTables/GetHistory"
	IPTables_Listen_FullMethodName        = "/tabserv.IPTables/Listen"
)

// IPTablesClient is the client API for IPTables service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # IPTables Service
//
// //
type IPTablesClient interface {
	// Add Drop TCP Rule
	AddDropTcp(ctx context.Context, in *AddDropTcpRequest, opts ...grpc.CallOption) (*AddDropTcpResponse, error)
	// Delete Drop TCP Rule
	DeleteDropTcp(ctx context.Context, in *DeleteDropTcpRequest, opts ...grpc.CallOption) (*DeleteDropTcpResponse, error)
	// List rules
	ListInput(ctx context.Context, in *ListInputRequest, opts ...grpc.CallOption) (*ListInputResponse, error)
	// List rules
	GetHistory(ctx context.Context, in *ListInputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListInputResponse], error)
	// Listen
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenEvent], error)
}

type iPTablesClient struct {
	cc grpc.ClientConnInterface
}

func NewIPTablesClient(cc grpc.ClientConnInterface) IPTablesClient {
	return &iPTablesClient{cc}
}

func (c *iPTablesClient) AddDropTcp(ctx context.Context, in *AddDropTcpRequest, opts ...grpc.CallOption) (*AddDropTcpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDropTcpResponse)
	err := c.cc.Invoke(ctx, IPTables_AddDropTcp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPTablesClient) DeleteDropTcp(ctx context.Context, in *DeleteDropTcpRequest, opts ...grpc.CallOption) (*DeleteDropTcpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDropTcpResponse)
	err := c.cc.Invoke(ctx, IPTables_DeleteDropTcp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPTablesClient) ListInput(ctx context.Context, in *ListInputRequest, opts ...grpc.CallOption) (*ListInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInputResponse)
	err := c.cc.Invoke(ctx, IPTables_ListInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPTablesClient) GetHistory(ctx context.Context, in *ListInputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListInputResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IPTables_ServiceDesc.Streams[0], IPTables_GetHistory_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListInputRequest, ListInputResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPTables_GetHistoryClient = grpc.ServerStreamingClient[ListInputResponse]

func (c *iPTablesClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IPTables_ServiceDesc.Streams[1], IPTables_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenRequest, ListenEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPTables_ListenClient = grpc.ServerStreamingClient[ListenEvent]

// IPTablesServer is the server API for IPTables service.
// All implementations must embed UnimplementedIPTablesServer
// for forward compatibility.
//
// # IPTables Service
//
// //
type IPTablesServer interface {
	// Add Drop TCP Rule
	AddDropTcp(context.Context, *AddDropTcpRequest) (*AddDropTcpResponse, error)
	// Delete Drop TCP Rule
	DeleteDropTcp(context.Context, *DeleteDropTcpRequest) (*DeleteDropTcpResponse, error)
	// List rules
	ListInput(context.Context, *ListInputRequest) (*ListInputResponse, error)
	// List rules
	GetHistory(*ListInputRequest, grpc.ServerStreamingServer[ListInputResponse]) error
	// Listen
	Listen(*ListenRequest, grpc.ServerStreamingServer[ListenEvent]) error
	mustEmbedUnimplementedIPTablesServer()
}

// UnimplementedIPTablesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIPTablesServer struct{}

func (UnimplementedIPTablesServer) AddDropTcp(context.Context, *AddDropTcpRequest) (*AddDropTcpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDropTcp not implemented")
}
func (UnimplementedIPTablesServer) DeleteDropTcp(context.Context, *DeleteDropTcpRequest) (*DeleteDropTcpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDropTcp not implemented")
}
func (UnimplementedIPTablesServer) ListInput(context.Context, *ListInputRequest) (*ListInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInput not implemented")
}
func (UnimplementedIPTablesServer) GetHistory(*ListInputRequest, grpc.ServerStreamingServer[ListInputResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedIPTablesServer) Listen(*ListenRequest, grpc.ServerStreamingServer[ListenEvent]) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedIPTablesServer) mustEmbedUnimplementedIPTablesServer() {}
func (UnimplementedIPTablesServer) testEmbeddedByValue()                  {}

// UnsafeIPTablesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPTablesServer will
// result in compilation errors.
type UnsafeIPTablesServer interface {
	mustEmbedUnimplementedIPTablesServer()
}

func RegisterIPTablesServer(s grpc.ServiceRegistrar, srv IPTablesServer) {
	// If the following call pancis, it indicates UnimplementedIPTablesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IPTables_ServiceDesc, srv)
}

func _IPTables_AddDropTcp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDropTcpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPTablesServer).AddDropTcp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPTables_AddDropTcp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPTablesServer).AddDropTcp(ctx, req.(*AddDropTcpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPTables_DeleteDropTcp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDropTcpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPTablesServer).DeleteDropTcp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPTables_DeleteDropTcp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPTablesServer).DeleteDropTcp(ctx, req.(*DeleteDropTcpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPTables_ListInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPTablesServer).ListInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPTables_ListInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPTablesServer).ListInput(ctx, req.(*ListInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPTables_GetHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IPTablesServer).GetHistory(m, &grpc.GenericServerStream[ListInputRequest, ListInputResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPTables_GetHistoryServer = grpc.ServerStreamingServer[ListInputResponse]

func _IPTables_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IPTablesServer).Listen(m, &grpc.GenericServerStream[ListenRequest, ListenEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IPTables_ListenServer = grpc.ServerStreamingServer[ListenEvent]

// IPTables_ServiceDesc is the grpc.ServiceDesc for IPTables service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPTables_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tabserv.IPTables",
	HandlerType: (*IPTablesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDropTcp",
			Handler:    _IPTables_AddDropTcp_Handler,
		},
		{
			MethodName: "DeleteDropTcp",
			Handler:    _IPTables_DeleteDropTcp_Handler,
		},
		{
			MethodName: "ListInput",
			Handler:    _IPTables_ListInput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHistory",
			Handler:       _IPTables_GetHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _IPTables_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kv.proto",
}
